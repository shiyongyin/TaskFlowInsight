1.作为专业的开发工程师

需要完成【上下文管理】的任务开发

1.认真阅读设计方案，理解设计方案的内容，反馈问题
设计方案目录
/Users/mac/work/development/project/TaskFlowInsight/docs/task/v1.0.0-mvp/api-implementation
详细设计目录
/Users/mac/work/development/project/TaskFlowInsight/docs/develop/v1.0.0-mvp/api-implementation继续

第一阶段.认真阅读设计方案 根据设计方案进行反思 给出问题清单
要求：100% 明确需求如何实现
方式：自我迭代 -> 是否到达100%  - >
   是：结束评估阶段 进入下一阶段
   否：列出问题清单md ->  重新评估  -> 排除问题后到的100% -> 一次性输出所有问题 -> 等待用户反馈 -> 用户修改问题清单进行解释 ->  持续迭代直到100%明确

评估内容：
 1.是否存在有需求不明确的地方，如果有直接说出来哪个地方不明确，
 2.是否不合理或者很难实现的地方，如果有直接反馈，哪些地方不合理或很难实现
 4.对于不明确的问题 列出个问题清单md文件 请在最后一次新反馈给我
 5.我会修改你给出的【问题清单md】之后让你重新审核直到100%明确才进行下一步

第二阶段.按照任务卡的描述进行高质量编码
 1.编写的代码需要严格按照任务卡的要求进行
 2.保证编写代码的质量,需求的完整度
 3.注释使用中文简洁明确
 3.可读性优先，性能第二
 4.kiss原则 避免过度设计
 5.在每一个类编写完成之后需要自我检查下
   1.是否100%匹配需求
   2.需求是否100%实现
   3.代码是否清晰干净
   4.在保证kiis原则基础上 是否为业内最佳实现
   5.是否存在性能问题
 进行自我迭代 以上都检查通过之后进行下一阶段


第三阶段.单元测试与代码审核
  单元测试设计原则：实事求是尽可能找出需求与实现差异的地方，提前发现问题
  关于mock：单元测试除非用户制定,否则不可以mock需要走真实的实现流程
  关于修复：单元测试不通过情况 优先检查实现类是否存在问题，只有在完全排除实现类的问题情况下，才去核对测试类的问题
           保证实现类的正确性，不是紧紧为了测试通过而修改测试类的数据或流程
  业务测试
  1.针对任务卡的要求设计业务单元测试
  2.单元测试应该优先保障业务测试的全面性，
     1.保证正常的业务场景能够覆盖率100%，
     2.边缘业务和数据尽可能的覆盖

  性能测试
     1.针对任务卡的要求设计性能单元测试
     2.保证核心代码的性能符合任务卡的验收标准

  测试报告
     根据测试的结果 生成测试报告


第四阶段.更新任务卡
 1.将当前进行更新到任务卡上
 2.针对任务卡的验收标准根据测试结果进行评估
 3.对于没有完成或者没有达到任务卡标准的记录详细信息
    1.是没有完成还是没有达到要求
    2.没有达到要求差多少
    3.针对这些任务距离达到要求，需要哪些困难需要什么帮助